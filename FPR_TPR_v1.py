from sklearn.metrics import roc_curve, auc
import numpy as np
import matplotlib.pyplot as plt
from itertools import cycle


# scores = [0.88,0.87,0.74,0.74,0.84,0.85,0.88,0.88,0.79,0.87,0.86,0.85,0.88,0.87,0.88,0.82,0.88,0.88,0.81,0.8,0.81,0.76,0.78,0.21,0.87]
# y_true = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
thres = [1,0.95,0.9,0.85,0.8,0.75,0.7,0.65,0.6,0.55,0.5,0.45,0.4,0.35,0.3,0.25,0.2,0.15,0.1,0.05,0]
#OK
# scores = [0.9,0.92,0.92,0.91,0.92,0.9,0.68,0.83,0.93,0.91,0.92,0.84,0.73,0.85,0.69,0.74,0.79,0.84,0.92,0.87,0.92,0.93,0.85,0.91,0.91,0.91,0.91,0.92,0.91,0.85,0.88,0.71,0.7,0.87,0.86,0.87,0.86,0.81,0.85,0.84]
# y_true =[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1]
#fold
# scores = [0.9,0.92,0.92,0.91,0.92,0.9,0.68,0.83,0.93,0.91,0.92,0.84,0.73,0.85,0.69,0.74,0.79,0.84,0.92,0.87,0.92,0.93,0.85,0.91,0.91,0.91,0.91,0.92,0.91,0.85,0.88,0.71,0.7,0.87,0.86,0.87,0.86,0.81,0.85,0.84]
# y_true =[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1]
#data01
# scores =[0.9,0.92,0.92,0.91,0.92,0.9,0.68,0.83,0.93,0.91,0.92,0.84,0.73,0.85,0.69,0.74,0.79,0.84,0.92,0.87,0.92,0.93,0.85,0.91,0.91,0.91,0.91,0.92,0.91,0.85,0.88,0.71,0.7,0.87,0.86,0.87,0.86,0.81,0.85,0.84,0.88,0.87,0.74,0.74,0.84,0.85,0.88,0.88,0.79,0.87,0.86,0.85,0.88,0.87,0.88,0.82,0.88,0.88,0.81,0.8,0.81,0.76,0.78,0.21,0.86,0.88,0.87,0.87,0.85,0.85,0.15,1,0.89,0.89,0.85,0.78,0.85,0.88,0.83,0.8,0.7,0.86,0.79,0.84,0.76,0.85,0.82,0.83,0.85,0.88,0.48,0.89,0.38,0.86,0.76,0.72,0.72,0.82,0.82,0.84,0.86,0.86,0.85,0.56,0.8,0.9,0.81,0.89,0.81,0.78,0.84,0.8,0.83,0.86,0.82,0.85,0.74,0.73,0.52,0.52,0.81,0.81,0.89,0.89,0.88,0.87,0.87,0.86,0.81,0.81,0.87,0.87,0.84,0.86,0.86,0.5,0.88,0.86,0.86,0.8,0.8,0.87,0.7,0.87,0.87,0.82,0.82,0.88,0.87,0.7,0.7,0.92,0.84,0.87,0.86,0.87,0.87,0.86,0.86,0.84,0.9,0.83,0.87,0.86,0.82,0.87,0.77,0.86,0.89,0.84,0.82,0.87,0.88,0.86,0.85,0.84,0.86,0.83,0.82,0.77,0.74,0.86,0.77,0.86,0.89,0.89,0.89,0.89,0.87,0.88,0.77,0.81,0.73,0.74,0.76,0.78,0.74,0.78,0.81,0.76]
# y_true = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,22,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,33,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,44,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]

#data02
'''scores = [0.9,0.92,0.92,0.91,0.92,0.9,0.68,0.83,0.93,0.91,0.92,0.84,0.73,0.85,0.69,0.74,0.79,0.84,0.92,0.87,0.92,0.93,0.85,0.91,0.91,0.91,0.91,0.92,0.91,0.85,0.88,0.71,0.7,0.87,0.51,0.87,0.86,0.81,0.85,0.84,0.88,0.87,0.74,0.74,0.84,0.85,0.88,0.88,0.79,0.87,0.86,0.85,0.88,0.87,0.88,0.82,0.88,0.88,0.81,0.8,0.81,0.76,0.78,0.21,0.86,0.88,0.87,0.87,0.85,0.85,0.15,0.5,0.89,0.89,0.85,0.78,0.85,0.88,0.83,0.44,0.7,0.86,0.79,0.84,0.76,0.85,0.82,0.83,0.85,0.88,0.48,0.89,0.38,0.86,0.76,0.72,0.72,0.82,0.82,0.84,0.86,0.86,0.85,0.56,0.8,0.9,0.81,0.89,0.81,0.78,0.84,0.8,0.83,0.86,0.82,0.85,0.74,0.25,0.15,0.52,0.81,0.81,0.89,0.89,0.88,0.87,0.87,0.86,0.81,0.81,0.87,0.87,0.84,0.86,0.86,0.5,0.88,0.86,0.86,0.8,0.8,0.87,0.31,0.87,0.87,0.82,0.82,0.88,0.87,0.7,0.7,0.92,0.84,0.87,0.86,0.87,0.87,0.86,0.86,0.84,0.9,0.83,0.87,0.86,0.82,0.87,0.77,0.86,0.89,0.84,0.82,0.87,0.88,0.86,0.85,0.84,0.86,0.83,0.82,0.77,0.74,0.86,0.77,0.86,0.89,0.89,0.89,0.89,0.87,0.88,0.77,0.81,0.73,0.74,0.76,0.78,0.74,0.78,0.81,0.76]
y_true = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,22,2,2,2,2,2,2,2,22,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,33,33,33,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,44,4,4,4,4,4,4,4,4,44,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]

TP = np.zeros(len(thres), dtype = int)
FN = np.zeros(len(thres), dtype = int)
TN = np.zeros(len(thres), dtype = int)
FP = np.zeros(len(thres), dtype = int)
a = 0
b = 0
n01 = 0
n02 = 22
n03 = 33
n04 = 44
n05 = 55
n1 = 1
n2 = 2
n3 = 3
n4 = 4
n5 = 5 
for x in thres:
    for i in scores:
        if ((i > x) and (y_true[b]==n1) ):
            TP[a] += 1
        elif (((i < x) and (y_true[b]==n1)) or ((i > x) and (y_true[b] == n01))):  
            FN[a] +=1
        elif ((i < 1-x) and (y_true[b]!=n1)):
            FP[a] += 1
        elif ((i > 1-x) and (y_true[b]!=n1)):
            TN[a] += 1 
        b += 1
    # print('TP', x, ' ', TP[a])
    # print('FP', x,' ', FP[a])
    # print('TN', x, ' ', TN[a])
    # print('FN', x, ' ', FN[a])
    a += 1
    b = 0
print('TP =',TP)
print('FP =',FP)
print('FN =',FN)
print('TN =',TN)'''


true = np.array([["H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H"],
                ["B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B"],
                ["Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y"]])

pred = np.array([["H", "Y", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "H", "Y", "H", "H", "H", "H"],
                ["B", "B", "H", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "Y", "B", "B", "B", "B", "B"],
                ["Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "H", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "B", "Y"]])

y_true = np.concatenate((true[0],true[1],true[2]), axis = None)

print(y_true)


# print('True labels:')
# print(y_true)
# print('\nScores:')
# print(scores)

# fpr, tpr, thresholds = roc_curve(y_true, scores, pos_label = 1)
# print('\nThreshold:')
# print(thresholds)
# print('True Positive Rate:')
# print(tpr)
# print('False Positive Rate:')
# print(fpr)

# plt.figure()
# lw = 2
# plt.plot(fpr, tpr, color='darkorange',
#          lw=lw, label='ROC curve (area = %0.2f)' % auc(fpr, tpr))
# plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
# plt.xlim([0.0, 1.0])
# plt.ylim([0.0, 1.05])
# plt.xlabel('False Positive Rate')
# plt.ylabel('True Positive Rate')
# plt.title('Receiver operating characteristic example')
# plt.legend(loc="lower right")
# plt.show()






